{"ast":null,"code":"import _objectSpread from \"/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\nimport combineHooksSlotProps from '../utils/combineHooksSlotProps';\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\n\n\nfunction useSelect(props) {\n  var buttonRefProp = props.buttonRef,\n      _props$defaultOpen = props.defaultOpen,\n      defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n      defaultValueProp = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      listboxIdProp = props.listboxId,\n      listboxRefProp = props.listboxRef,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      onChange = props.onChange,\n      onHighlightChange = props.onHighlightChange,\n      onOpenChange = props.onOpenChange,\n      openProp = props.open,\n      optionsParam = props.options,\n      _props$getOptionAsStr = props.getOptionAsString,\n      getOptionAsString = _props$getOptionAsStr === void 0 ? defaultOptionStringifier : _props$getOptionAsStr,\n      valueProp = props.value;\n  var buttonRef = React.useRef(null);\n  var handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  var listboxRef = React.useRef(null);\n  var listboxId = useId(listboxIdProp);\n  var defaultValue;\n\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n\n  var value = React.useMemo(function () {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n\n      return valueProp == null ? [] : [valueProp];\n    }\n\n    return undefined;\n  }, [valueProp, multiple]);\n\n  var _useCompoundParent = useCompoundParent(),\n      subitems = _useCompoundParent.subitems,\n      compoundComponentContextValue = _useCompoundParent.contextValue;\n\n  var options = React.useMemo(function () {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map(function (option, index) {\n        return [option.value, {\n          value: option.value,\n          label: option.label,\n          disabled: option.disabled,\n          ref: /*#__PURE__*/React.createRef(),\n          id: \"\".concat(listboxId, \"_\").concat(index)\n        }];\n      }));\n    }\n\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  var handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n\n  var _useButton = useButton({\n    disabled: disabled,\n    rootRef: handleButtonRef\n  }),\n      getButtonRootProps = _useButton.getRootProps,\n      buttonActive = _useButton.active,\n      buttonFocusVisible = _useButton.focusVisible,\n      mergedButtonRef = _useButton.rootRef;\n\n  var optionValues = React.useMemo(function () {\n    return Array.from(options.keys());\n  }, [options]);\n  var isItemDisabled = React.useCallback(function (valueToCheck) {\n    var _option$disabled;\n\n    var option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  var stringifyOption = React.useCallback(function (valueToCheck) {\n    var option = options.get(valueToCheck);\n\n    if (!option) {\n      return '';\n    }\n\n    return getOptionAsString(option);\n  }, [options, getOptionAsString]);\n  var controlledState = React.useMemo(function () {\n    return {\n      selectedValues: value,\n      open: openProp\n    };\n  }, [value, openProp]);\n  var getItemId = React.useCallback(function (itemValue) {\n    var _options$get;\n\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  var handleSelectionChange = React.useCallback(function (event, newValues) {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  var handleHighlightChange = React.useCallback(function (event, newValue) {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  var handleStateChange = React.useCallback(function (event, field, fieldValue) {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  var useListParameters = {\n    getInitialState: function getInitialState() {\n      var _defaultValue;\n\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId: getItemId,\n    controlledProps: controlledState,\n    isItemDisabled: isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(function () {\n      return {\n        multiple: multiple\n      };\n    }, [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n\n  var _useList = useList(useListParameters),\n      dispatch = _useList.dispatch,\n      getListboxRootProps = _useList.getRootProps,\n      listContextValue = _useList.contextValue,\n      _useList$state = _useList.state,\n      open = _useList$state.open,\n      highlightedOption = _useList$state.highlightedValue,\n      selectedOptions = _useList$state.selectedValues,\n      mergedListRootRef = _useList.rootRef;\n\n  var createHandleButtonClick = function createHandleButtonClick(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onClic;\n\n      otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n\n      if (!event.defaultMuiPrevented) {\n        var action = {\n          type: SelectActionTypes.buttonClick,\n          event: event\n        };\n        dispatch(action);\n      }\n    };\n  };\n\n  useEnhancedEffect(function () {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n\n      var optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n\n      var listboxClientRect = listboxRef.current.getBoundingClientRect();\n      var optionClientRect = optionRef.current.getBoundingClientRect();\n\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n  var getOptionMetadata = React.useCallback(function (optionValue) {\n    return options.get(optionValue);\n  }, [options]);\n\n  var getSelectTriggerProps = function getSelectTriggerProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread(_objectSpread({}, otherHandlers), {}, {\n      onClick: createHandleButtonClick(otherHandlers),\n      ref: mergedListRootRef,\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n\n  var getButtonProps = function getButtonProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    var combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return combinedProps(otherHandlers);\n  };\n\n  var getListboxProps = function getListboxProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread(_objectSpread({}, otherHandlers), {}, {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault // to prevent the button from losing focus when interacting with the listbox\n\n    });\n  };\n\n  React.useDebugValue({\n    selectedOptions: selectedOptions,\n    highlightedOption: highlightedOption,\n    open: open\n  });\n  var contextValue = React.useMemo(function () {\n    return _objectSpread(_objectSpread({}, listContextValue), compoundComponentContextValue);\n  }, [listContextValue, compoundComponentContextValue]);\n  var selectValue;\n\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n\n  return {\n    buttonActive: buttonActive,\n    buttonFocusVisible: buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue: contextValue,\n    disabled: disabled,\n    dispatch: dispatch,\n    getButtonProps: getButtonProps,\n    getListboxProps: getListboxProps,\n    getOptionMetadata: getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open: open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption: highlightedOption\n  };\n}\n\nexport default useSelect;","map":{"version":3,"sources":["/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@mui/base/useSelect/useSelect.js"],"names":["React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","useButton","SelectActionTypes","useList","defaultOptionStringifier","useCompoundParent","selectReducer","combineHooksSlotProps","preventDefault","event","useSelect","props","buttonRefProp","buttonRef","defaultOpen","defaultValueProp","defaultValue","disabled","listboxIdProp","listboxId","listboxRefProp","listboxRef","multiple","onChange","onHighlightChange","onOpenChange","openProp","open","optionsParam","options","getOptionAsString","valueProp","value","useRef","handleButtonRef","undefined","useMemo","subitems","compoundComponentContextValue","contextValue","Map","map","option","index","label","ref","createRef","id","handleListboxRef","rootRef","getButtonRootProps","getRootProps","buttonActive","active","buttonFocusVisible","focusVisible","mergedButtonRef","optionValues","Array","from","keys","isItemDisabled","useCallback","valueToCheck","_option$disabled","get","stringifyOption","controlledState","selectedValues","getItemId","itemValue","_options$get","handleSelectionChange","newValues","_newValues$","handleHighlightChange","newValue","handleStateChange","field","fieldValue","type","_buttonRef$current","current","focus","useListParameters","getInitialState","_defaultValue","highlightedValue","controlledProps","onStateChange","reducerActionContext","items","getItemAsString","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","mergedListRootRef","createHandleButtonClick","otherHandlers","_otherHandlers$onClic","onClick","call","defaultMuiPrevented","action","buttonClick","_options$get2","optionRef","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getOptionMetadata","optionValue","getSelectTriggerProps","role","getButtonProps","listboxAndButtonProps","combinedProps","getListboxProps","onMouseDown","useDebugValue","selectValue","length"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\nimport combineHooksSlotProps from '../utils/combineHooksSlotProps';\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = options.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [options, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    isItemDisabled,\n    rootRef: mergedButtonRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = useList(useListParameters);\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n      const optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n  const getOptionMetadata = React.useCallback(optionValue => options.get(optionValue), [options]);\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return {\n      ...otherHandlers,\n      onClick: createHandleButtonClick(otherHandlers),\n      ref: mergedListRootRef,\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    };\n  };\n  const getButtonProps = (otherHandlers = {}) => {\n    const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);\n    const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);\n    return combinedProps(otherHandlers);\n  };\n  const getListboxProps = (otherHandlers = {}) => {\n    return {\n      ...otherHandlers,\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined,\n      ref: handleListboxRef,\n      onMouseDown: preventDefault // to prevent the button from losing focus when interacting with the listbox\n    };\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => ({\n    ...listContextValue,\n    ...compoundComponentContextValue\n  }), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport default useSelect;"]},"metadata":{},"sourceType":"module"}