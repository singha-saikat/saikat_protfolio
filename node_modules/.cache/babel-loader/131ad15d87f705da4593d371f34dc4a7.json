{"ast":null,"code":"import _slicedToArray from \"/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { CompoundComponentContext } from './useCompound';\n/**\n * Registers a child component with the parent component.\n *\n * @param id A unique key for the child component. If the `id` is `undefined`, the registration logic will not run (this can sometimes be the case during SSR).\n * @param itemMetadata Arbitrary metadata to pass to the parent component. This should be a stable reference (e.g. a memoized object), to avoid unnecessary re-registrations.\n * @param missingKeyGenerator A function that generates a unique id for the item.\n *   It is called with the set of the ids of all the items that have already been registered.\n *   Return `existingKeys.size` if you want to use the index of the new item as the id.\n *\n * @ignore - internal hook.\n */\n\nexport function useCompoundItem(id, itemMetadata, missingKeyGenerator) {\n  var context = React.useContext(CompoundComponentContext);\n\n  if (context === null) {\n    throw new Error('useCompoundItem must be used within a useCompoundParent');\n  }\n\n  var registerItem = context.registerItem;\n\n  var _React$useState = React.useState(id),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      registeredId = _React$useState2[0],\n      setRegisteredId = _React$useState2[1];\n\n  useEnhancedEffect(function () {\n    var _registerItem = registerItem(id, itemMetadata, missingKeyGenerator),\n        returnedId = _registerItem.id,\n        deregister = _registerItem.deregister;\n\n    setRegisteredId(returnedId);\n    return deregister;\n  }, [registerItem, itemMetadata, missingKeyGenerator, id]);\n  return {\n    id: registeredId,\n    index: registeredId !== undefined ? context.getItemIndex(registeredId) : -1,\n    totalItemCount: context.totalSubitemCount\n  };\n}","map":{"version":3,"sources":["/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@mui/base/utils/useCompoundItem.js"],"names":["React","unstable_useEnhancedEffect","useEnhancedEffect","CompoundComponentContext","useCompoundItem","id","itemMetadata","missingKeyGenerator","context","useContext","Error","registerItem","useState","registeredId","setRegisteredId","returnedId","deregister","index","undefined","getItemIndex","totalItemCount","totalSubitemCount"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,0BAA0B,IAAIC,iBAAvC,QAAgE,YAAhE;AACA,SAASC,wBAAT,QAAyC,eAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,EAAzB,EAA6BC,YAA7B,EAA2CC,mBAA3C,EAAgE;AACrE,MAAMC,OAAO,GAAGR,KAAK,CAACS,UAAN,CAAiBN,wBAAjB,CAAhB;;AACA,MAAIK,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAM,IAAIE,KAAJ,CAAU,yDAAV,CAAN;AACD;;AACD,MACEC,YADF,GAEIH,OAFJ,CACEG,YADF;;AAGA,wBAAwCX,KAAK,CAACY,QAAN,CAAeP,EAAf,CAAxC;AAAA;AAAA,MAAOQ,YAAP;AAAA,MAAqBC,eAArB;;AACAZ,EAAAA,iBAAiB,CAAC,YAAM;AACtB,wBAGIS,YAAY,CAACN,EAAD,EAAKC,YAAL,EAAmBC,mBAAnB,CAHhB;AAAA,QACMQ,UADN,iBACEV,EADF;AAAA,QAEEW,UAFF,iBAEEA,UAFF;;AAIAF,IAAAA,eAAe,CAACC,UAAD,CAAf;AACA,WAAOC,UAAP;AACD,GAPgB,EAOd,CAACL,YAAD,EAAeL,YAAf,EAA6BC,mBAA7B,EAAkDF,EAAlD,CAPc,CAAjB;AAQA,SAAO;AACLA,IAAAA,EAAE,EAAEQ,YADC;AAELI,IAAAA,KAAK,EAAEJ,YAAY,KAAKK,SAAjB,GAA6BV,OAAO,CAACW,YAAR,CAAqBN,YAArB,CAA7B,GAAkE,CAAC,CAFrE;AAGLO,IAAAA,cAAc,EAAEZ,OAAO,CAACa;AAHnB,GAAP;AAKD","sourcesContent":["import * as React from 'react';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { CompoundComponentContext } from './useCompound';\n\n/**\n * Registers a child component with the parent component.\n *\n * @param id A unique key for the child component. If the `id` is `undefined`, the registration logic will not run (this can sometimes be the case during SSR).\n * @param itemMetadata Arbitrary metadata to pass to the parent component. This should be a stable reference (e.g. a memoized object), to avoid unnecessary re-registrations.\n * @param missingKeyGenerator A function that generates a unique id for the item.\n *   It is called with the set of the ids of all the items that have already been registered.\n *   Return `existingKeys.size` if you want to use the index of the new item as the id.\n *\n * @ignore - internal hook.\n */\n\nexport function useCompoundItem(id, itemMetadata, missingKeyGenerator) {\n  const context = React.useContext(CompoundComponentContext);\n  if (context === null) {\n    throw new Error('useCompoundItem must be used within a useCompoundParent');\n  }\n  const {\n    registerItem\n  } = context;\n  const [registeredId, setRegisteredId] = React.useState(id);\n  useEnhancedEffect(() => {\n    const {\n      id: returnedId,\n      deregister\n    } = registerItem(id, itemMetadata, missingKeyGenerator);\n    setRegisteredId(returnedId);\n    return deregister;\n  }, [registerItem, itemMetadata, missingKeyGenerator, id]);\n  return {\n    id: registeredId,\n    index: registeredId !== undefined ? context.getItemIndex(registeredId) : -1,\n    totalItemCount: context.totalSubitemCount\n  };\n}"]},"metadata":{},"sourceType":"module"}