{"ast":null,"code":"import _objectSpread from \"/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"elementType\", \"externalSlotProps\", \"ownerState\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport appendOwnerState from './appendOwnerState';\nimport mergeSlotProps from './mergeSlotProps';\nimport resolveComponentProps from './resolveComponentProps';\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\n\nexport default function useSlotProps(parameters) {\n  var _parameters$additiona;\n\n  var elementType = parameters.elementType,\n      externalSlotProps = parameters.externalSlotProps,\n      ownerState = parameters.ownerState,\n      rest = _objectWithoutProperties(parameters, _excluded);\n\n  var resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);\n\n  var _mergeSlotProps = mergeSlotProps(_objectSpread(_objectSpread({}, rest), {}, {\n    externalSlotProps: resolvedComponentsProps\n  })),\n      mergedProps = _mergeSlotProps.props,\n      internalRef = _mergeSlotProps.internalRef;\n\n  var ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  var props = appendOwnerState(elementType, _objectSpread(_objectSpread({}, mergedProps), {}, {\n    ref: ref\n  }), ownerState);\n  return props;\n}","map":{"version":3,"sources":["/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@mui/base/utils/useSlotProps.js"],"names":["unstable_useForkRef","useForkRef","appendOwnerState","mergeSlotProps","resolveComponentProps","useSlotProps","parameters","_parameters$additiona","elementType","externalSlotProps","ownerState","rest","resolvedComponentsProps","mergedProps","props","internalRef","ref","additionalProps"],"mappings":";;;AAAA,SAASA,mBAAmB,IAAIC,UAAhC,QAAkD,YAAlD;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;AAC/C,MAAIC,qBAAJ;;AACA,MACEC,WADF,GAKIF,UALJ,CACEE,WADF;AAAA,MAEEC,iBAFF,GAKIH,UALJ,CAEEG,iBAFF;AAAA,MAGEC,UAHF,GAKIJ,UALJ,CAGEI,UAHF;AAAA,MAIKC,IAJL,4BAKIL,UALJ;;AAMA,MAAMM,uBAAuB,GAAGR,qBAAqB,CAACK,iBAAD,EAAoBC,UAApB,CAArD;;AACA,wBAGIP,cAAc,iCACbQ,IADa;AAEhBF,IAAAA,iBAAiB,EAAEG;AAFH,KAHlB;AAAA,MACSC,WADT,mBACEC,KADF;AAAA,MAEEC,WAFF,mBAEEA,WAFF;;AAOA,MAAMC,GAAG,GAAGf,UAAU,CAACc,WAAD,EAAcH,uBAAuB,IAAI,IAA3B,GAAkC,KAAK,CAAvC,GAA2CA,uBAAuB,CAACI,GAAjF,EAAsF,CAACT,qBAAqB,GAAGD,UAAU,CAACW,eAApC,KAAwD,IAAxD,GAA+D,KAAK,CAApE,GAAwEV,qBAAqB,CAACS,GAApL,CAAtB;AACA,MAAMF,KAAK,GAAGZ,gBAAgB,CAACM,WAAD,kCACzBK,WADyB;AAE5BG,IAAAA,GAAG,EAAHA;AAF4B,MAG3BN,UAH2B,CAA9B;AAIA,SAAOI,KAAP;AACD","sourcesContent":["import { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport appendOwnerState from './appendOwnerState';\nimport mergeSlotProps from './mergeSlotProps';\nimport resolveComponentProps from './resolveComponentProps';\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nexport default function useSlotProps(parameters) {\n  var _parameters$additiona;\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState,\n    ...rest\n  } = parameters;\n  const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps({\n    ...rest,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  const props = appendOwnerState(elementType, {\n    ...mergedProps,\n    ref\n  }, ownerState);\n  return props;\n}"]},"metadata":{},"sourceType":"module"}