{"ast":null,"code":"import _objectSpread from \"/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"colorSchemes\", \"components\"],\n    _excluded2 = [\"light\"];\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\n\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  var _theme$colorSchemes = theme.colorSchemes,\n      colorSchemes = _theme$colorSchemes === void 0 ? {} : _theme$colorSchemes,\n      components = theme.components,\n      otherTheme = _objectWithoutProperties(theme, _excluded);\n\n  var _cssVarsParser = cssVarsParser(otherTheme, parserConfig),\n      rootVars = _cssVarsParser.vars,\n      rootCss = _cssVarsParser.css,\n      rootVarsWithDefaults = _cssVarsParser.varsWithDefaults;\n\n  var themeVars = rootVarsWithDefaults;\n  var colorSchemesMap = {};\n\n  var light = colorSchemes.light,\n      otherColorSchemes = _objectWithoutProperties(colorSchemes, _excluded2);\n\n  Object.entries(otherColorSchemes || {}).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        scheme = _ref2[1];\n\n    var _cssVarsParser2 = cssVarsParser(scheme, parserConfig),\n        vars = _cssVarsParser2.vars,\n        css = _cssVarsParser2.css,\n        varsWithDefaults = _cssVarsParser2.varsWithDefaults;\n\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css: css,\n      vars: vars\n    };\n  });\n\n  if (light) {\n    // light color scheme vars should be merged last to set as default\n    var _cssVarsParser3 = cssVarsParser(light, parserConfig),\n        css = _cssVarsParser3.css,\n        vars = _cssVarsParser3.vars,\n        varsWithDefaults = _cssVarsParser3.varsWithDefaults;\n\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap.light = {\n      css: css,\n      vars: vars\n    };\n  }\n\n  var generateCssVars = function generateCssVars(colorScheme) {\n    if (!colorScheme) {\n      return {\n        css: _objectSpread({}, rootCss),\n        vars: rootVars\n      };\n    }\n\n    return {\n      css: _objectSpread({}, colorSchemesMap[colorScheme].css),\n      vars: colorSchemesMap[colorScheme].vars\n    };\n  };\n\n  return {\n    vars: themeVars,\n    generateCssVars: generateCssVars\n  };\n}\n\nexport default prepareCssVars;","map":{"version":3,"sources":["/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"names":["deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","colorSchemes","components","otherTheme","rootVars","vars","rootCss","css","rootVarsWithDefaults","varsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","Object","entries","forEach","key","scheme","generateCssVars","colorScheme"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,YAA/B,EAA6C;AAC3C;AACA,4BAIID,KAJJ,CACEE,YADF;AAAA,MACEA,YADF,oCACiB,EADjB;AAAA,MAEEC,UAFF,GAIIH,KAJJ,CAEEG,UAFF;AAAA,MAGKC,UAHL,4BAIIJ,KAJJ;;AAKA,uBAIIF,aAAa,CAACM,UAAD,EAAaH,YAAb,CAJjB;AAAA,MACQI,QADR,kBACEC,IADF;AAAA,MAEOC,OAFP,kBAEEC,GAFF;AAAA,MAGoBC,oBAHpB,kBAGEC,gBAHF;;AAKA,MAAIC,SAAS,GAAGF,oBAAhB;AACA,MAAMG,eAAe,GAAG,EAAxB;;AACA,MACEC,KADF,GAGIX,YAHJ,CACEW,KADF;AAAA,MAEKC,iBAFL,4BAGIZ,YAHJ;;AAIAa,EAAAA,MAAM,CAACC,OAAP,CAAeF,iBAAiB,IAAI,EAApC,EAAwCG,OAAxC,CAAgD,gBAAmB;AAAA;AAAA,QAAjBC,GAAiB;AAAA,QAAZC,MAAY;;AACjE,0BAIIrB,aAAa,CAACqB,MAAD,EAASlB,YAAT,CAJjB;AAAA,QACEK,IADF,mBACEA,IADF;AAAA,QAEEE,GAFF,mBAEEA,GAFF;AAAA,QAGEE,gBAHF,mBAGEA,gBAHF;;AAKAC,IAAAA,SAAS,GAAGd,SAAS,CAACc,SAAD,EAAYD,gBAAZ,CAArB;AACAE,IAAAA,eAAe,CAACM,GAAD,CAAf,GAAuB;AACrBV,MAAAA,GAAG,EAAHA,GADqB;AAErBF,MAAAA,IAAI,EAAJA;AAFqB,KAAvB;AAID,GAXD;;AAYA,MAAIO,KAAJ,EAAW;AACT;AACA,0BAIIf,aAAa,CAACe,KAAD,EAAQZ,YAAR,CAJjB;AAAA,QACEO,GADF,mBACEA,GADF;AAAA,QAEEF,IAFF,mBAEEA,IAFF;AAAA,QAGEI,gBAHF,mBAGEA,gBAHF;;AAKAC,IAAAA,SAAS,GAAGd,SAAS,CAACc,SAAD,EAAYD,gBAAZ,CAArB;AACAE,IAAAA,eAAe,CAACC,KAAhB,GAAwB;AACtBL,MAAAA,GAAG,EAAHA,GADsB;AAEtBF,MAAAA,IAAI,EAAJA;AAFsB,KAAxB;AAID;;AACD,MAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,WAAW,EAAI;AACrC,QAAI,CAACA,WAAL,EAAkB;AAChB,aAAO;AACLb,QAAAA,GAAG,oBACED,OADF,CADE;AAILD,QAAAA,IAAI,EAAED;AAJD,OAAP;AAMD;;AACD,WAAO;AACLG,MAAAA,GAAG,oBACEI,eAAe,CAACS,WAAD,CAAf,CAA6Bb,GAD/B,CADE;AAILF,MAAAA,IAAI,EAAEM,eAAe,CAACS,WAAD,CAAf,CAA6Bf;AAJ9B,KAAP;AAMD,GAfD;;AAgBA,SAAO;AACLA,IAAAA,IAAI,EAAEK,SADD;AAELS,IAAAA,eAAe,EAAfA;AAFK,GAAP;AAID;;AACD,eAAerB,cAAf","sourcesContent":["import { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    components,\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    light,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // light color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap.light = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    if (!colorScheme) {\n      return {\n        css: {\n          ...rootCss\n        },\n        vars: rootVars\n      };\n    }\n    return {\n      css: {\n        ...colorSchemesMap[colorScheme].css\n      },\n      vars: colorSchemesMap[colorScheme].vars\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;"]},"metadata":{},"sourceType":"module"}