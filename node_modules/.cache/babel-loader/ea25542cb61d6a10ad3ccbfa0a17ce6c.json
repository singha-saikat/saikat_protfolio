{"ast":null,"code":"import _slicedToArray from \"/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nexport var CompoundComponentContext = /*#__PURE__*/React.createContext(null);\nCompoundComponentContext.displayName = 'CompoundComponentContext';\n/**\n * Provides a way for a component to know about its children.\n *\n * Child components register themselves with the `useCompoundItem` hook, passing in arbitrary metadata to the parent.\n *\n * This is a more powerful altervantive to `children` traversal, as child components don't have to be placed\n * directly inside the parent component. They can be anywhere in the tree (and even rendered by other components).\n *\n * The downside is that this doesn't work with SSR as it relies on the useEffect hook.\n *\n * @ignore - internal hook.\n */\n\nexport function useCompoundParent() {\n  var _React$useState = React.useState(new Map()),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      subitems = _React$useState2[0],\n      setSubitems = _React$useState2[1];\n\n  var subitemKeys = React.useRef(new Set());\n  var deregisterItem = React.useCallback(function deregisterItem(id) {\n    subitemKeys.current.delete(id);\n    setSubitems(function (previousState) {\n      var newState = new Map(previousState);\n      newState.delete(id);\n      return newState;\n    });\n  }, []);\n  var registerItem = React.useCallback(function registerItem(id, item, missingKeyGenerator) {\n    var providedOrGeneratedId;\n\n    if (id === undefined) {\n      if (missingKeyGenerator === undefined) {\n        throw new Error(\"The compound component's child doesn't have a key. You need to provide a missingKeyGenerator to generate it.\");\n      }\n\n      providedOrGeneratedId = missingKeyGenerator(subitemKeys.current);\n    } else {\n      providedOrGeneratedId = id;\n    }\n\n    subitemKeys.current.add(providedOrGeneratedId);\n    setSubitems(function (previousState) {\n      var newState = new Map(previousState);\n      newState.set(providedOrGeneratedId, item);\n      return newState;\n    });\n    return {\n      id: providedOrGeneratedId,\n      deregister: function deregister() {\n        return deregisterItem(providedOrGeneratedId);\n      }\n    };\n  }, [deregisterItem]);\n  var getItemIndex = React.useCallback(function getItemIndex(id) {\n    return Array.from(subitems.keys()).indexOf(id);\n  }, [subitems]);\n  return {\n    contextValue: {\n      getItemIndex: getItemIndex,\n      registerItem: registerItem,\n      totalSubitemCount: subitems.size\n    },\n    subitems: subitems\n  };\n}","map":{"version":3,"sources":["/Users/saikatsingha/Projects /My protfolio/saikat_protfolio-1/node_modules/@mui/base/utils/useCompound.js"],"names":["React","CompoundComponentContext","createContext","displayName","useCompoundParent","useState","Map","subitems","setSubitems","subitemKeys","useRef","Set","deregisterItem","useCallback","id","current","delete","previousState","newState","registerItem","item","missingKeyGenerator","providedOrGeneratedId","undefined","Error","add","set","deregister","getItemIndex","Array","from","keys","indexOf","contextValue","totalSubitemCount","size"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,IAAMC,wBAAwB,GAAG,aAAaD,KAAK,CAACE,aAAN,CAAoB,IAApB,CAA9C;AACPD,wBAAwB,CAACE,WAAzB,GAAuC,0BAAvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,GAA6B;AAClC,wBAAgCJ,KAAK,CAACK,QAAN,CAAe,IAAIC,GAAJ,EAAf,CAAhC;AAAA;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AACA,MAAMC,WAAW,GAAGT,KAAK,CAACU,MAAN,CAAa,IAAIC,GAAJ,EAAb,CAApB;AACA,MAAMC,cAAc,GAAGZ,KAAK,CAACa,WAAN,CAAkB,SAASD,cAAT,CAAwBE,EAAxB,EAA4B;AACnEL,IAAAA,WAAW,CAACM,OAAZ,CAAoBC,MAApB,CAA2BF,EAA3B;AACAN,IAAAA,WAAW,CAAC,UAAAS,aAAa,EAAI;AAC3B,UAAMC,QAAQ,GAAG,IAAIZ,GAAJ,CAAQW,aAAR,CAAjB;AACAC,MAAAA,QAAQ,CAACF,MAAT,CAAgBF,EAAhB;AACA,aAAOI,QAAP;AACD,KAJU,CAAX;AAKD,GAPsB,EAOpB,EAPoB,CAAvB;AAQA,MAAMC,YAAY,GAAGnB,KAAK,CAACa,WAAN,CAAkB,SAASM,YAAT,CAAsBL,EAAtB,EAA0BM,IAA1B,EAAgCC,mBAAhC,EAAqD;AAC1F,QAAIC,qBAAJ;;AACA,QAAIR,EAAE,KAAKS,SAAX,EAAsB;AACpB,UAAIF,mBAAmB,KAAKE,SAA5B,EAAuC;AACrC,cAAM,IAAIC,KAAJ,CAAU,8GAAV,CAAN;AACD;;AACDF,MAAAA,qBAAqB,GAAGD,mBAAmB,CAACZ,WAAW,CAACM,OAAb,CAA3C;AACD,KALD,MAKO;AACLO,MAAAA,qBAAqB,GAAGR,EAAxB;AACD;;AACDL,IAAAA,WAAW,CAACM,OAAZ,CAAoBU,GAApB,CAAwBH,qBAAxB;AACAd,IAAAA,WAAW,CAAC,UAAAS,aAAa,EAAI;AAC3B,UAAMC,QAAQ,GAAG,IAAIZ,GAAJ,CAAQW,aAAR,CAAjB;AACAC,MAAAA,QAAQ,CAACQ,GAAT,CAAaJ,qBAAb,EAAoCF,IAApC;AACA,aAAOF,QAAP;AACD,KAJU,CAAX;AAKA,WAAO;AACLJ,MAAAA,EAAE,EAAEQ,qBADC;AAELK,MAAAA,UAAU,EAAE;AAAA,eAAMf,cAAc,CAACU,qBAAD,CAApB;AAAA;AAFP,KAAP;AAID,GApBoB,EAoBlB,CAACV,cAAD,CApBkB,CAArB;AAqBA,MAAMgB,YAAY,GAAG5B,KAAK,CAACa,WAAN,CAAkB,SAASe,YAAT,CAAsBd,EAAtB,EAA0B;AAC/D,WAAOe,KAAK,CAACC,IAAN,CAAWvB,QAAQ,CAACwB,IAAT,EAAX,EAA4BC,OAA5B,CAAoClB,EAApC,CAAP;AACD,GAFoB,EAElB,CAACP,QAAD,CAFkB,CAArB;AAGA,SAAO;AACL0B,IAAAA,YAAY,EAAE;AACZL,MAAAA,YAAY,EAAZA,YADY;AAEZT,MAAAA,YAAY,EAAZA,YAFY;AAGZe,MAAAA,iBAAiB,EAAE3B,QAAQ,CAAC4B;AAHhB,KADT;AAML5B,IAAAA,QAAQ,EAARA;AANK,GAAP;AAQD","sourcesContent":["import * as React from 'react';\nexport const CompoundComponentContext = /*#__PURE__*/React.createContext(null);\nCompoundComponentContext.displayName = 'CompoundComponentContext';\n/**\n * Provides a way for a component to know about its children.\n *\n * Child components register themselves with the `useCompoundItem` hook, passing in arbitrary metadata to the parent.\n *\n * This is a more powerful altervantive to `children` traversal, as child components don't have to be placed\n * directly inside the parent component. They can be anywhere in the tree (and even rendered by other components).\n *\n * The downside is that this doesn't work with SSR as it relies on the useEffect hook.\n *\n * @ignore - internal hook.\n */\nexport function useCompoundParent() {\n  const [subitems, setSubitems] = React.useState(new Map());\n  const subitemKeys = React.useRef(new Set());\n  const deregisterItem = React.useCallback(function deregisterItem(id) {\n    subitemKeys.current.delete(id);\n    setSubitems(previousState => {\n      const newState = new Map(previousState);\n      newState.delete(id);\n      return newState;\n    });\n  }, []);\n  const registerItem = React.useCallback(function registerItem(id, item, missingKeyGenerator) {\n    let providedOrGeneratedId;\n    if (id === undefined) {\n      if (missingKeyGenerator === undefined) {\n        throw new Error(\"The compound component's child doesn't have a key. You need to provide a missingKeyGenerator to generate it.\");\n      }\n      providedOrGeneratedId = missingKeyGenerator(subitemKeys.current);\n    } else {\n      providedOrGeneratedId = id;\n    }\n    subitemKeys.current.add(providedOrGeneratedId);\n    setSubitems(previousState => {\n      const newState = new Map(previousState);\n      newState.set(providedOrGeneratedId, item);\n      return newState;\n    });\n    return {\n      id: providedOrGeneratedId,\n      deregister: () => deregisterItem(providedOrGeneratedId)\n    };\n  }, [deregisterItem]);\n  const getItemIndex = React.useCallback(function getItemIndex(id) {\n    return Array.from(subitems.keys()).indexOf(id);\n  }, [subitems]);\n  return {\n    contextValue: {\n      getItemIndex,\n      registerItem,\n      totalSubitemCount: subitems.size\n    },\n    subitems\n  };\n}"]},"metadata":{},"sourceType":"module"}